* Atlantis Water Meter Board
** How it works
   - get the water pulses by the four inputs
   - send the pulses to managing board (Rpi Hat) over RS485
   - check the inputs pairs intergrity and show states in the pulses led
   - check the RS-485 connection and show up state on link led

** Hardware Start [5/5]
   - [X] 4 channels LED outputs
   - [X] 4 channels pulses inputs
   - [X] link LED output
   - [X] ADC inputs for channels
   - [X] Usart rs485 output


** Firmware [3/3]
   - [X] ADC inputs thresholds
   - [X] noise filter on digital inputs
   - [X] usart to rs485 link comms


* Testing on Client Date DD-MM-YYYY
** some problem?
   - what was the detected problem

* Data
** a fireman hose 19liter/s
** the ekm metering SPWM-150 10liter/pulse
   - so two pulses per second when using for a fire


* Final instalation
* DuckDNS
** Creamos el fichero
 nano duck.sh
Y copiamos el texto que tienes en la página web con el token de tu nombre de dominio

echo url="https://www.duckdns.org/update?domains=vhfpilotage&token=0f8b5f5e-ef01-4127-aca6-b38c8005c6f5&ip=" | curl -k -o ~/duckdns/duck.log -K -

Damos permisos de ejecución al fichero
 chmod 700 duck.sh

** Editar cron para ejecutar el archivo
   Editamos el servicio cron para hacer que el fichero se ejecute cada 5 minutos
   $ crontab -e

   Y copiamos el siguiente texto
   */5 * * * * ~/duckdns/duck.sh >/dev/null 2>&1

   Para guardar el fichero pulsamos CTRL+x


Probamos que el script funciona
 ./duck.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100     2    0     2    0     0      2      0 --:--:-- --:--:-- --:--:--     2

Esto creará un fichero llamado duck.log, el cual tendrá dos valores OK, si todo ha ido bien o bad KO si ha habido algún problema.
cat duck.log
OK
A partir de ahora., cada vez que se acceda al nombre de dominio vhfpilotage.duckdns.org estaré accediendo al servidor, concretamente al puerto 80 (puerto por defecto)



* DuckDNS specific coralpetro config
** duckdns account
   [[./duck_account.org][archivo de la cuenta]]


* Arranque automatico como un servicio
** link tutorial
   - https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units

** ejemplo express_server.service
   [Unit]
   Description=Express Server VHF over IP
   After=rc-local.service
   # After=multi-user.target      
   
   [Service]
   WorkingDirectory=/home/pi/node_express
   ExecStart=/bin/bash -c '/usr/bin/node --expose-gc /home/pi/node_express/index.js raspbian > /home/pi/node_express/index.log 2>&1'
   
   [Install]
   WantedBy=multi-user.target

** crear link simbolico en /etc/systemd/system
   $ cd /etc/systemd/system
   $ ln -s ~/flask_app/flask_server.service flask_server.service
   $ cd -

** para probar y correr el servicio
   $ sudo systemctl start application.service

   $ sudo systemctl stop application.service

** arranque automatico en boot
*** crea un vinculo simbolico en /etc/systemd/system
   $ sudo systemctl enable application.service

*** quita el vinculo del arranque automatico
   $ sudo systemctl disable application.service

** revisar el estado del servicio
   $ sudo systemctl status application.service

   $ sudo systemctl is-active application.service

   $ sudo systemctl is-enabled application.service

   $ sudo systemctl is-failed application.service

** ver todas las unidades corriendo en el sistema 
   $ systemctl list-units

